using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using System.Text;
using System;

class Solution {

    // Complete the quickSort function below.
    static int[] quickSort(int[] arr) {
        int[] answer = new int[arr.Length];
        List<int> left = new List<int>();
        List<int> middle = new List<int>();
        List<int> right = new List<int>();
        List<int> brr = new List<int>();
        int num = arr[0];
        for (int a = 0; a < arr.Length; a++){
            if (arr[a] < num){
                left.Add(arr[a]);
            } else if (arr[a] == num){
                 middle.Add(arr[a]);
            } else {
                right.Add(arr[a]);
            }
        }
        // Adding to one list then transforming it into array to return
        brr.AddRange(left);
        brr.AddRange(middle);
        brr.AddRange(right);

        answer = brr.ToArray();

        return answer;
    }

    static void Main(string[] args) {
        TextWriter textWriter = new StreamWriter(@System.Environment.GetEnvironmentVariable("OUTPUT_PATH"), true);

        int n = Convert.ToInt32(Console.ReadLine());

        int[] arr = Array.ConvertAll(Console.ReadLine().Split(' '), arrTemp => Convert.ToInt32(arrTemp))
        ;
        int[] result = quickSort(arr);

        textWriter.WriteLine(string.Join(" ", result));

        textWriter.Flush();
        textWriter.Close();
    }
}
